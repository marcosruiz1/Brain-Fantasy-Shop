@page "/producto/create"
@using PracticaBlazor.UI.Shared.Models
@using PracticaBlazor.UI.Shared.Models.Dto
@inject HttpClient Http
@inject NavigationManager Navigation

<div class="container ">
<h3>Create</h3>

@if (_producto == null)
{
    <div id="app" class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <EditForm Model="@_producto" OnValidSubmit="Post">
        <div class="form-group">
            <label>Nombre: </label>
            <InputText @bind-Value="_producto.Nombre" />
        </div>
        <div class="form-group">
            <label>Categoria: </label>
            <InputSelect @bind-Value="_producto.Categoria">
                @foreach (var cat in _categorias)
                {
                <option value="@cat.Id">@cat.Nombre</option>
                }
        </InputSelect>
    </div>
    <div class="form-group">
        <label>Precio: </label>
        <InputNumber @bind-Value="_producto.Precio" />
    </div>
    <div class="form-group">
        <label>Descripcion</label>
        <InputTextArea @bind-Value="_producto.Descripcion" />
    </div>
    <div class="form-group">
        <label>Imagen: </label>
        <InputFile OnChange="@OnFileChange" multiple="false" accept="images/jpeg" />
    </div>
    <div class="form-group">
        <input type="submit" class="btn btn-success" value="Agregar producto" />
    </div>
</EditForm>
}
</div>


@code {
    private Producto _producto = new();
    private List<Categoria> _categorias = new();

    private async Task Post()
    {
        await Http.PostAsJsonAsync<Producto>("/api/Productos/", _producto);
        Navigation.NavigateTo("/productos");
    }

    //Conseguir las categorías
    protected override async Task OnInitializedAsync()
    {
        _categorias = await Http.GetFromJsonAsync<List<Categoria>>("/api/Categorias");
    }

    private async Task OnFileChange(InputFileChangeEventArgs ev)
    {
        //get the file
        var file = ev.File;

        //read that file in a byte array
        var buffer = new byte[file.Size];
        await file.OpenReadStream(1512000).ReadAsync(buffer);

        //convert byte array to base 64 string
        _producto.Imagen = $"data:image/png;base64,{Convert.ToBase64String(buffer)}";
    }
}
