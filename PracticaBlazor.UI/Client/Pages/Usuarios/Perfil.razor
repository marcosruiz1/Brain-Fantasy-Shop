@page "/usuario/perfil"
@using PracticaBlazor.UI.Shared.Models
@using System.ComponentModel.DataAnnotations
@using PracticaBlazor.UI.Shared.Models.Dto.Usuario
@using System.Collections
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IToastService toastService


<div class="container">
    <ul class="breadcrumb">
        <li><a href="/"><i class="fa fa-home"></i></a></li>
        <li><a href="/usuario/perfil">Account</a></li>
        <li><span>Perfil</span></li>
    </ul>
    <div class="main-body">
        <div class="row">
            <div class="col-lg-4">
                <div class="card">
                    <div class="card-body">
                        <EditForm Model="@_usuario" OnValidSubmit="PutImage">
                            <div class="d-flex flex-column align-items-center text-center">
                                <label for="input" class="input-label rounded-circle p-1 bg-primary">
                                    @if (_usuario.Imagen == "default_User_Img")
                                    {
                                        <img src="/images/default_User_Img.png" alt="Admin" class="rounded-circle p-1 bg-primary imagenFoto">
                                    }
                                    else
                                    {
                                        <img src="@_usuario.Imagen" alt="Admin" class="rounded-circle p-1 bg-primary imagenFoto">
                                    }
                                </label>
                                <InputFile OnChange="@OnFileChange" multiple="false" accept="images/jpeg" class="btnInput" id="input" hidden />

                                <div class="mt-3">
                                    <h4>@_usuario.Username</h4>
                                    <p class="text-secondary mb-1">Full Stack Developer</p>
                                    <p class="text-muted font-size-sm">Bay Area, San Francisco, CA</p>
                                    <input class="btn btn-primary px-4" type="submit" value="Guardar Imagen">
                                </div>
                            </div>
                        </EditForm>
                        <hr class="my-4">
                        <ul class="list-group list-group-flush">
                            <li class="list-group-item d-flex justify-content-between align-items-center flex-wrap">
                                <h6 class="mb-0"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-globe me-2 icon-inline"><circle cx="12" cy="12" r="10"></circle><line x1="2" y1="12" x2="22" y2="12"></line><path d="M12 2a15.3 15.3 0 0 1 4 10 15.3 15.3 0 0 1-4 10 15.3 15.3 0 0 1-4-10 15.3 15.3 0 0 1 4-10z"></path></svg>Website</h6>
                                <span class="text-secondary">https://bootdey.com</span>
                            </li>
                            <li class="list-group-item d-flex justify-content-between align-items-center flex-wrap">
                                <h6 class="mb-0"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-github me-2 icon-inline"><path d="M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 0 0-.94-2.61c3.14-.35 6.44-1.54 6.44-7A5.44 5.44 0 0 0 20 4.77 5.07 5.07 0 0 0 19.91 1S18.73.65 16 2.48a13.38 13.38 0 0 0-7 0C6.27.65 5.09 1 5.09 1A5.07 5.07 0 0 0 5 4.77a5.44 5.44 0 0 0-1.5 3.78c0 5.42 3.3 6.61 6.44 7A3.37 3.37 0 0 0 9 18.13V22"></path></svg>Github</h6>
                                <span class="text-secondary">bootdey</span>
                            </li>
                            <li class="list-group-item d-flex justify-content-between align-items-center flex-wrap">
                                <h6 class="mb-0"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-twitter me-2 icon-inline text-info"><path d="M23 3a10.9 10.9 0 0 1-3.14 1.53 4.48 4.48 0 0 0-7.86 3v1A10.66 10.66 0 0 1 3 4s-4 9 5 13a11.64 11.64 0 0 1-7 2c9 5 20 0 20-11.5a4.5 4.5 0 0 0-.08-.83A7.72 7.72 0 0 0 23 3z"></path></svg>Twitter</h6>
                                <span class="text-secondary">bootdey</span>
                            </li>
                            <li class="list-group-item d-flex justify-content-between align-items-center flex-wrap">
                                <h6 class="mb-0"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-instagram me-2 icon-inline text-danger"><rect x="2" y="2" width="20" height="20" rx="5" ry="5"></rect><path d="M16 11.37A4 4 0 1 1 12.63 8 4 4 0 0 1 16 11.37z"></path><line x1="17.5" y1="6.5" x2="17.51" y2="6.5"></line></svg>Instagram</h6>
                                <span class="text-secondary">bootdey</span>
                            </li>
                            <li class="list-group-item d-flex justify-content-between align-items-center flex-wrap">
                                <h6 class="mb-0"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-facebook me-2 icon-inline text-primary"><path d="M18 2h-3a5 5 0 0 0-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 0 1 1-1h3z"></path></svg>Facebook</h6>
                                <span class="text-secondary">bootdey</span>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
            <div class="col-lg-8">
                <div class="card">
                    <div class="card-body">
                        <EditForm Model="@_userDatos" OnValidSubmit="Put">
                            <DataAnnotationsValidator />
                            <div class="row mb-3">
                                <div class="col-sm-3">
                                    <h6 class="mb-0">Email</h6>
                                </div>
                                <div class="col-sm-9 text-secondary">
                                    <InputText type="email" class="form-control" @bind-Value="_userDatos.Email" />
                                    <ValidationMessage For="@(() => _userDatos.Email)" />
                                </div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-sm-3">
                                    <h6 class="mb-0">Nombre</h6>
                                </div>
                                <div class="col-sm-9 text-secondary">
                                    <InputText type="text" class="form-control" @bind-Value="_userDatos.Nombre" />
                                    <ValidationMessage For="@(() => _userDatos.Nombre)" />
                                </div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-sm-3">
                                    <h6 class="mb-0">Apellidos</h6>
                                </div>
                                <div class="col-sm-9 text-secondary">
                                    <InputText type="text" class="form-control" @bind-Value="_userDatos.Apellidos" />
                                    <ValidationMessage For="@(() => _userDatos.Apellidos)" />
                                </div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-sm-3">
                                    <h6 class="mb-0">Teléfono</h6>
                                </div>
                                <div class="col-sm-9 text-secondary">
                                    <InputText type="text" class="form-control" @bind-Value="_userDatos.Telefono" />
                                    <ValidationMessage For="@(() => _userDatos.Telefono)" />
                                </div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-sm-3">
                                    <h6 class="mb-0">Dirección</h6>
                                </div>
                                <div class="col-sm-9 text-secondary">
                                    <InputText type="text" class="form-control" @bind-Value="_userDatos.Direccion" />
                                    <ValidationMessage For="@(() => _userDatos.Direccion)" />
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-sm-3"></div>
                                <div class="col-sm-9 text-secondary">
                                    <input class="btn btn-primary px-4" type="submit" value="Guardar Cambios" disabled="@(!context.Validate())">
                                </div>
                            </div>
                        </EditForm>
                    </div>
                </div>

                <div class="row">
                    <div class="col-sm-12">
                        <div class="card">
                            <EditForm Model="@_userPwd" OnValidSubmit="PutPassword">
                                <DataAnnotationsValidator />
                                <div class="card-body">
                                    <h5 class="d-flex align-items-center mb-3">Cambiar contraseña</h5>
                                    <div class="form-floating mb-3">
                                        <InputText type="password" class="form-control" id="floatingPassword" placeholder="Actual Contraseña" @bind-Value="_userPwd.ActualContraseña" />
                                        <label for="floatingPassword">Actual Contraseña</label>
                                        <ValidationMessage For="@(() => _userPwd.ActualContraseña)" />
                                    </div>
                                    <div class="form-floating mb-3">
                                        <InputText type="password" class="form-control" id="floatingPasswordNew" placeholder="Nueva Contraseña" @bind-Value="_userPwd.NuevaContraseña" />
                                        <label for="floatingPasswordNew">Nueva Contraseña</label>
                                        <ValidationMessage For="@(() => _userPwd.NuevaContraseña)" />
                                    </div>
                                    <div class="form-floating mb-3">
                                        <InputText type="password" class="form-control" id="floatingPasswordConfirm" placeholder="Confirma Contraseña" @bind-Value="_userPwd.ConfirmaContraseña" />
                                        <label for="floatingPasswordConfirm">Confirma Contraseña</label>
                                        <ValidationMessage For="@(() => _userPwd.ConfirmaContraseña)" />
                                    </div>
                                    <input class="btn btn-primary px-4" type="submit" value="Guardar Cambios" disabled="@(!context.Validate() || !context.IsModified())">
                                </div>
                            </EditForm>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {

    private Usuario _usuario = new Usuario();
    private UsuarioContraseñaDto _userPwd = new UsuarioContraseñaDto();
    private UsuarioDatosDto _userDatos = new UsuarioDatosDto();

    protected override async Task OnInitializedAsync()
    {
        _usuario = await Http.GetFromJsonAsync<Usuario>($"/api/Usuarios/getMe");
        _userDatos = RellenarUsuario(_usuario);
    }
    private async Task Put()
    {
        await Http.PutAsJsonAsync<UsuarioDatosDto>($"/api/Usuarios/datos/{_usuario.Id}", _userDatos);
        toastService.ShowSuccess("Datos actualizados");
    }
    private async Task PutImage()
    {
        await Http.PutAsJsonAsync<Usuario>($"/api/Usuarios/{_usuario.Id}", _usuario);
        toastService.ShowSuccess("Imagen de perfil actualizada");
    }
    private async Task PutPassword()
    {

        var result = await Http.PutAsJsonAsync<UsuarioContraseñaDto>($"/api/Usuarios/pwd/{_usuario.Id}", _userPwd);
        var token = await result.Content.ReadAsStringAsync();
        Console.WriteLine(token);
        if (token == "false")
        {
            toastService.ShowError("Contraseña actual incorrecta");
        }
        else
        {
            toastService.ShowSuccess("Contraseña actualizada");
        }
    }
    private async Task OnFileChange(InputFileChangeEventArgs ev)
    {
        //get the file
        var file = ev.File;

        //read that file in a byte array
        var buffer = new byte[file.Size];
        await file.OpenReadStream(1512000).ReadAsync(buffer);

        //convert byte array to base 64 string
        _usuario.Imagen = $"data:image/png;base64,{Convert.ToBase64String(buffer)}";
    }

    public UsuarioDatosDto RellenarUsuario(Usuario usuario)
    {
        UsuarioDatosDto userDatos = new();
        userDatos.Nombre = usuario.Nombre;
        userDatos.Apellidos = usuario.Apellidos;
        userDatos.Email = usuario.Email;
        userDatos.Telefono = usuario.Telefono;
        userDatos.Direccion = usuario.Direccion;
        return userDatos;
    }
}
